{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "Gradle ラッパー スクリプトを使用してビルドします",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.group.displayName.junitTestResults": "JUnit のテスト結果",
  "loc.group.displayName.codeCoverage": "コード カバレッジ",
  "loc.group.displayName.advanced": "詳細設定",
  "loc.group.displayName.CodeAnalysis": "コード分析",
  "loc.input.label.wrapperScript": "Gradle ラッパー",
  "loc.input.help.wrapperScript": "リポジトリのルートから Gradle のラッパー スクリプトへの相対パス。",
  "loc.input.label.options": "オプション",
  "loc.input.label.tasks": "タスク",
  "loc.input.label.cwd": "作業ディレクトリ",
  "loc.input.help.cwd": "Gradle ビルドの実行先の作業ディレクトリ。指定しない場合は、リポジトリのルート ディレクトリが使用されます。",
  "loc.input.label.publishJUnitResults": "TFS/Team Services に発行する",
  "loc.input.help.publishJUnitResults": "Gradle のビルドによって生成された JUnit のテスト結果を TFS/Team Services に発行するには、このオプションを選びます。`テスト結果ファイル` と一致する各テスト結果ファイルが、TFS/Team Services でのテストの実行として発行されます。",
  "loc.input.label.testResultsFiles": "テスト結果のファイル",
  "loc.input.help.testResultsFiles": "テスト結果ファイルのパス。ワイルドカードを使用できます。たとえば、名前が TEST- で始まるすべての XML ファイルの場合は `**/TEST-*.xml` です。",
  "loc.input.label.testRunTitle": "テスト実行のタイトル",
  "loc.input.help.testRunTitle": "テストの実行の名前を指定します。",
  "loc.input.label.codeCoverageTool": "Code Coverage Tool",
  "loc.input.help.codeCoverageTool": "コード カバレッジ ツールを選択します。",
  "loc.input.label.classFilesDirectories": "クラス ファイル ディレクトリ",
  "loc.input.help.classFilesDirectories": "クラス ファイルやアーカイブ ファイル (JAR、WAR など) を格納するディレクトリのコンマ区切り一覧。コード カバレッジはこれらのディレクトリ内のクラス ファイルに関して報告されます。通常、`build/classes/main` (Gradle のビルドの既定のクラス ディレクトリ) でクラスを検索します",
  "loc.input.label.classFilter": "クラス包含/除外フィルター",
  "loc.input.help.classFilter": "コード カバレッジの収集にクラスを含めたり除いたりするためのフィルターのコンマ区切り一覧。たとえば、+:com.*,+:org.*,-:my.app*.* と指定します。",
  "loc.input.label.javaHomeSelection": "次の条件で JAVA_HOME を設定します",
  "loc.input.help.javaHomeSelection": "ビルド中に検出される JDK バージョンを選択するか、JDK パスを手動で入力して JAVA_HOME を設定します。",
  "loc.input.label.jdkVersion": "JDK のバージョン",
  "loc.input.help.jdkVersion": "選択した JDK のバージョンへのパスの検出を試み、適宜 JAVA_HOME を設定します。",
  "loc.input.label.jdkUserInputPath": "JDK パス",
  "loc.input.help.jdkUserInputPath": "指定したパスに JAVA_HOME を設定します。",
  "loc.input.label.jdkArchitecture": "JDK アーキテクチャ",
  "loc.input.help.jdkArchitecture": "(省略可能) JDK のアーキテクチャ (x86、x64) を指定します。",
  "loc.input.label.gradleOpts": "Set GRADLE_OPTS",
  "loc.input.help.gradleOpts": "Sets the GRADLE_OPTS enviroment variable, which is used to send command-line arguments to start the JVM. The xmx flag specifies the maximum memory available to the JVM.",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube Analysis",
  "loc.input.help.sqAnalysisEnabled": "現在の目標を実行したら、[SonarQube 解析](https://go.microsoft.com/fwlink/?LinkID=708598) を実行します。'install' または 'package' の目標は最初に実行する必要があります。",
  "loc.input.label.sqConnectedServiceName": "SonarQube Endpoint",
  "loc.input.help.sqConnectedServiceName": "The endpoint that specifies the SonarQube server to use",
  "loc.input.label.sqProjectName": "SonarQube プロジェクト名",
  "loc.input.help.sqProjectName": "SonarQube プロジェクト名 (sonar.projectName)。",
  "loc.input.label.sqProjectKey": "SonarQube プロジェクト キー",
  "loc.input.help.sqProjectKey": "SonarQube プロジェクトの一意キー (sonar.projectKey)。",
  "loc.input.label.sqProjectVersion": "SonarQube プロジェクト バージョン",
  "loc.input.help.sqProjectVersion": "SonarQube プロジェクトのバージョン (sonar.projectVersion)。",
  "loc.input.label.sqDbDetailsRequired": "The SonarQube server version is lower than 5.2",
  "loc.input.help.sqDbDetailsRequired": "SonarQube サーバー 5.1 以前を使用している場合は、データベース接続の詳細を指定する必要があります。",
  "loc.input.label.sqDbUrl": "Db Connection String",
  "loc.input.help.sqDbUrl": "SonarQube サーバー 5.1 以前のみ。データベース接続設定 (sonar.jdbc.url) を入力します。例: jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor",
  "loc.input.label.sqDbUsername": "DB ユーザー名",
  "loc.input.help.sqDbUsername": "SonarQube サーバー 5.1 以前のみ。データベース ユーザーのユーザー名 (sonar.jdbc.username) を入力します。",
  "loc.input.label.sqDbPassword": "Db User Password",
  "loc.input.help.sqDbPassword": "SonarQube サーバー 5.1 以前のみ。データベース ユーザーのパスワード (sonar.jdbc.password) を入力します",
  "loc.input.label.sqAnalysisIncludeFullReport": "ビルド概要 (SQ 5.3+) に完全な解析レポートが含まれる",
  "loc.input.help.sqAnalysisIncludeFullReport": "SonarQube の解析が完了するまで、このオプションはビルドを遅延させます。",
  "loc.input.label.sqAnalysisBreakBuildIfQualityGateFailed": "Fail the build on quality gate failure (SQ 5.3+)",
  "loc.input.help.sqAnalysisBreakBuildIfQualityGateFailed": "このオプションは、SonarQube サーバー 5.3 以降を使っている場合にのみ使用可能です。SonarQube が分析を完了するまでビルドを待機する必要があるため、遅延が発生します。[詳細情報] (https://go.microsoft.com/fwlink/?LinkId=722407)",
  "loc.input.label.checkstyleAnalysisEnabled": "Run Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "Run the Checkstyle tool with the default Sun checks. Results are uploaded as build artifacts.",
  "loc.input.label.pmdAnalysisEnabled": "Run PMD",
  "loc.input.help.pmdAnalysisEnabled": "Use the PMD Java static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "TaskReport オブジェクトの作成に失敗しました。フィールド %s が見つかりません",
  "loc.messages.sqCommon_WaitingForAnalysis": "Waiting for the SonarQube server to analyse the build.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Build not configured to wait for the SonarQube analysis. Detailed quality gate status will not be available.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Could not detect the quality gate status or a new status has been introduced.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Server responded with an invalid or unexpected response format.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s の解析が有効です。",
  "loc.messages.codeAnalysis_ToolFailed": "%s の解析に失敗しました。",
  "loc.messages.sqAnalysis_IncrementalMode": "PR ビルドが検出されました - インクリメンタル モードで SonarQube 解析を実行しています",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube 解析レポート",
  "loc.messages.sqAnalysis_TaskReportInvalid": "タスク レポートが無効であるか、見つかりません。SonarQube が正常に終了したことをご確認ください。",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "詳しい SonarQube レポート",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Cannot authenticate to the SonarQube server. Check the saved endpoint details and the status of the server.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "The analysis did not complete in the allotted time of %d seconds.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "Pull request build: detailed SonarQube build summary will not be available.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "Pull request build: build will not be broken if quality gate fails.",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "The SonarQube quality gate associated with this build has failed.",
  "loc.messages.sqAnalysis_QualityGatePassed": "The SonarQube quality gate associated with this build has passed (status %s)",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s により、%d 個のファイルで %d 件の違反が見つかりました。",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s により、1 つのファイルで %d 件の違反が見つかりました。",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s により、1 つのファイルで 1 件の違反が見つかりました。",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s で違反は見つかりませんでした。",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Code Analysis Report",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Code Analysis Results"
}