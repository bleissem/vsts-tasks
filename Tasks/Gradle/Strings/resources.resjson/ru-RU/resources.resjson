{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "Сборка с помощью скрипта программы-оболочки Gradle",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.group.displayName.junitTestResults": "Результаты теста JUnit",
  "loc.group.displayName.codeCoverage": "Объем протестированного кода",
  "loc.group.displayName.advanced": "Дополнительно",
  "loc.group.displayName.CodeAnalysis": "Анализ кода",
  "loc.input.label.wrapperScript": "Программа-оболочка Gradle",
  "loc.input.help.wrapperScript": "Относительный путь от корня репозитория к скрипту оболочки Gradle.",
  "loc.input.label.options": "Параметры",
  "loc.input.label.tasks": "Задачи",
  "loc.input.label.cwd": "Рабочая папка",
  "loc.input.help.cwd": "Рабочий каталог, в котором должна выполняться сборка Gradle. Если он не задан, используется корневой каталог репозитория.",
  "loc.input.label.publishJUnitResults": "Опубликовать в TFS или Team Services",
  "loc.input.help.publishJUnitResults": "Выберите этот параметр, чтобы опубликовать результаты теста JUnit, созданные сборкой Gradle, в TFS или Team Services. Каждый файл результатов теста, соответствующий запросу \"Файлы результатов тестов\", будет опубликован как тестовый запуск в TFS или Team Services.",
  "loc.input.label.testResultsFiles": "Файлы результатов тестов",
  "loc.input.help.testResultsFiles": "Путь к файлам результатов тестов. Можно использовать подстановочные знаки. Пример: \"**/TEST-*.xml\" для всех XML-файлов, имена которых начинаются с \"TEST-\".",
  "loc.input.label.testRunTitle": "Заголовок тестового запуска",
  "loc.input.help.testRunTitle": "Укажите имя для тестового запуска.",
  "loc.input.label.codeCoverageTool": "Code Coverage Tool",
  "loc.input.help.codeCoverageTool": "Выберите средство оценки объемов протестированного кода.",
  "loc.input.label.classFilesDirectories": "Каталоги файлов классов",
  "loc.input.help.classFilesDirectories": "Разделенный запятыми список каталогов, содержащих файлы классов и архивов (JAR, WAR и т. д.). Объем протестированного кода указывается для файлов классов в этих каталогах. Задача ищет классы в каталоге \"build/classes/main\", который является каталогом классов по умолчанию для сборок Gradle.",
  "loc.input.label.classFilter": "Фильтры включения и исключения классов",
  "loc.input.help.classFilter": "Список фильтров с разделителями-запятыми для включения или исключения классов при сборе данных по объему протестированного кода. Например: +:com.*,+:org.*,-:my.app*.*.",
  "loc.input.label.javaHomeSelection": "Установка JAVA_HOME с помощью",
  "loc.input.help.javaHomeSelection": "Задается JAVA_HOME указанием версии JDK, которая будет обнаруживаться во время сборок, или указанием пути к JDK вручную.",
  "loc.input.label.jdkVersion": "Версия JDK",
  "loc.input.help.jdkVersion": "Пытается определить путь к выбранной версии JDK и установить переменную JAVA_HOME соответствующим образом.",
  "loc.input.label.jdkUserInputPath": "Путь к JDK",
  "loc.input.help.jdkUserInputPath": "Установка для JAVA_HOME определенного пути.",
  "loc.input.label.jdkArchitecture": "Архитектура JDK",
  "loc.input.help.jdkArchitecture": "Дополнительно укажите архитектуру JDK (x86, x64).",
  "loc.input.label.gradleOpts": "Set GRADLE_OPTS",
  "loc.input.help.gradleOpts": "Sets the GRADLE_OPTS enviroment variable, which is used to send command-line arguments to start the JVM. The xmx flag specifies the maximum memory available to the JVM.",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube Analysis",
  "loc.input.help.sqAnalysisEnabled": "После выполнения текущих целей запустите [анализ SonarQube](https://go.microsoft.com/fwlink/?LinkID=708598). Сначала необходимо выполнить цели \"install\" или \"package\".",
  "loc.input.label.sqConnectedServiceName": "SonarQube Endpoint",
  "loc.input.help.sqConnectedServiceName": "The endpoint that specifies the SonarQube server to use",
  "loc.input.label.sqProjectName": "Имя проекта SonarQube",
  "loc.input.help.sqProjectName": "Имя проекта SonarQube, например sonar.ProjectName.",
  "loc.input.label.sqProjectKey": "Ключ проекта SonarQube",
  "loc.input.help.sqProjectKey": "Уникальный ключ проекта SonarQube, например sonar.projectKey.",
  "loc.input.label.sqProjectVersion": "Версия проекта SonarQube",
  "loc.input.help.sqProjectVersion": "Версия проекта SonarQube, например sonar.projectVersion.",
  "loc.input.label.sqDbDetailsRequired": "The SonarQube server version is lower than 5.2",
  "loc.input.help.sqDbDetailsRequired": "При использовании сервера SonarQube версии 5.1 или более ранней необходимо указать сведения о подключении к базе данных.",
  "loc.input.label.sqDbUrl": "Db Connection String",
  "loc.input.help.sqDbUrl": "Только при использовании сервера SonarQube версии 5.1 или более ранней: введите параметр подключения к базе данных (например, sonar.jdbc.url). Пример: jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor.",
  "loc.input.label.sqDbUsername": "Имя пользователя базы данных",
  "loc.input.help.sqDbUsername": "Только при использовании сервера SonarQube версии 5.1 или более ранней: введите имя пользователя базы данных (например, sonar.jdbc.username).",
  "loc.input.label.sqDbPassword": "Db User Password",
  "loc.input.help.sqDbPassword": "Только при использовании сервера SonarQube версии 5.1 или более ранней: введите пароль пользователя базы данных, например sonar.jdbc.password.",
  "loc.input.label.sqAnalysisIncludeFullReport": "Включить полный отчет об анализе в сводку сборки (SQ 5.3+)",
  "loc.input.help.sqAnalysisIncludeFullReport": "При выборе этого параметра сборка откладывается до тех пор, пока не будет завершен анализ SonarQube.",
  "loc.input.label.sqAnalysisBreakBuildIfQualityGateFailed": "Fail the build on quality gate failure (SQ 5.3+)",
  "loc.input.help.sqAnalysisBreakBuildIfQualityGateFailed": "Этот параметр доступен только при использовании сервера SonarQube 5.3 или более поздней версии. Он вызывает задержки, так как сборка должна дождаться завершения анализа SonarQube. [Дополнительные сведения](https://go.microsoft.com/fwlink/?LinkId=722407)",
  "loc.input.label.checkstyleAnalysisEnabled": "Run Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "Run the Checkstyle tool with the default Sun checks. Results are uploaded as build artifacts.",
  "loc.input.label.pmdAnalysisEnabled": "Run PMD",
  "loc.input.help.pmdAnalysisEnabled": "Use the PMD Java static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "Не удалось создать объект TaskReport. Отсутствует поле: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "Waiting for the SonarQube server to analyse the build.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Build not configured to wait for the SonarQube analysis. Detailed quality gate status will not be available.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Could not detect the quality gate status or a new status has been introduced.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Server responded with an invalid or unexpected response format.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "Анализ %s включен.",
  "loc.messages.codeAnalysis_ToolFailed": "Сбой анализа %s.",
  "loc.messages.sqAnalysis_IncrementalMode": "Обнаружена сборка PR — анализ SonarQube выполняется в инкрементном режиме",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "Отчет об анализе SonarQube",
  "loc.messages.sqAnalysis_TaskReportInvalid": "Отчет о задаче недопустим или отсутствует. Убедитесь в том, что работа SonarQube завершена успешно.",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "Подробный отчет SonarQube",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Cannot authenticate to the SonarQube server. Check the saved endpoint details and the status of the server.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "The analysis did not complete in the allotted time of %d seconds.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "Pull request build: detailed SonarQube build summary will not be available.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "Pull request build: build will not be broken if quality gate fails.",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "The SonarQube quality gate associated with this build has failed.",
  "loc.messages.sqAnalysis_QualityGatePassed": "The SonarQube quality gate associated with this build has passed (status %s)",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s обнаружил нарушения (%d) в файлах (%d).",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s обнаружил нарушения (%d) в одном файле.",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s обнаружил одно нарушение в одном файле.",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s не обнаружил нарушений.",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Code Analysis Report",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Code Analysis Results"
}